第０１回課題　「実数型変数」

【学習要項】
  □実数型の表現範囲（絶対値）
  □実数型定数の指数表記
  □実数型（浮動小数点数型）の誤差
  □実数型乱数の生成
  □四捨五入

【演習手順】
０１．サーバー（配布フォルダ）からRealNumberプロジェクトフォルダをデスクトップにコピーする
０２．RealNumber.slnを開き、ビルド・実行して動作確認する
０３．RealNumber.cppを開く

０４．コメント①～⑨を実装し、ビルド・実行して動作確認する

	01: #include <float.h>
	02: #include <stdio.h>
	03: #include <stdlib.h>
	04: #include <time.h>
	05: #include <math.h>
	06: 
	07: void main()
	08: {
	09: 	//実数型の表現範囲（絶対値）
	10: 	//①float型で表すことのできる最大値を変数maxに代入する
	11: 	float max = 0.0f;
	12: 
	13: 	printf( "float型で表すことのできる最大値は%e\n", max );	//指数形式で表示
	14: 
	15: 	//②float型で表すことのできる最小絶対値（ゼロに最も近い数）を変数minに代入する
	16: 	float min = 0.0f;
	17: 
	18: 	printf( "float型で表すことのできる最小絶対値（ゼロに最も近い数）は%e\n", min );	//指数形式で表示
	19: 
	20: 	//実数型の指数表記
	21: 	//③星が収縮してブラックホールになる半径をシュヴァルツシルト半径（Schwarzschild radius）と言い、次式で与えられる。
	22: 	// r = 2GM/c^2
	23: 	//ここで、rはシュヴァルツシルト半径、Mは質量、Gは万有引力定数、cは光の速度である。
	24: 	//地球のシュヴァルツシルト半径を求める。（MKS単位系を用いること）
	25: 	float r = 0.0f;	//シュヴァルツシルト半径
	26: 
	27: 	printf( "地球のシュヴァルツシルト半径は%fメートル\n", r );
	28: 
	29: 	//実数型（浮動小数点数型）の誤差
	30: 	//④下記の等値判定は一見正しいが、期待通りの動作をしない。誤差を考慮した判定式に変更する。
	31: 	//⑤さらに、近似的に等値判定をする関数を実装する。
	32: 	float a = 0.1f;
	33: 	float b = 0.2f;
	34: 	if( a + b == 0.3f )
	35: 	{
	36: 		printf( "0.1と0.2の和は0.3である！" );
	37: 	}
	38: 	else
	39: 	{
	40: 		printf( "0.1と0.2の和は0.3にならない・・・？" );
	41: 	}
	42: 	printf( "\n" );
	43: 
	44: 	//⑥下記の等値判定も一見正しいが、期待通りの動作をしない。③で実装した関数を使って近似的に等値判定をする。
	45: 	float n = 0.0f;
	46: 	for( int i = 0; i < 100; i++ )
	47: 	{
	48: 		n += 0.01f;
	49: 	}
	50: 	if( n == 1.0f )
	51: 	{
	52: 		printf( "実数値0.01を100回加算すると1になる！" );
	53: 	}
	54: 	else
	55: 	{
	56: 		printf( "実数値0.01を100回加算すると1にならない・・・？" );
	57: 	}
	58: 	printf( "\n" );
	59: 
	60: 	//実数型乱数
	61: 	srand( ( unsigned int )time( 0 ) );
	62: 	//⑦0以上1以下の実数型乱数を生成し、変数rに代入する。
	63: 	//【ヒント】rand関数の生成する乱数の最大値はstdlib.hで次のように定義されている
	64: 	//	#define RAND_MAX 0x7fff
	65: 	for( int i = 0; i < 5; i++ )
	66: 	{
	67: 		float r = 0.0f;
	68: 
	69: 		printf( "0以上1以下の実数乱数：%f\n", r );
	70: 	}
	71: 	//⑧10以上15以下の実数型乱数を生成し、変数rに代入する。
	72: 	for( int i = 0; i < 5; i++ )
	73: 	{
	74: 		float r = 0.0f;
	75: 
	76: 		printf( "10以上15以下の実数乱数：%f\n", r );
	77: 	}	
	78: 	//⑨2以上5以下の実数型乱数を生成し、変数rに代入する。さらに、その乱数の小数点以下第3位を四捨五入し、変数sに代入する。
	79: 	for( int i = 0; i < 5; i++ )
	80: 	{
	81: 		float r = 0.0f;
	82: 		float s = 0.0f;
	83: 
	84: 		printf( "%fを小数点以下第3位を四捨五入すると%fになる\n", r, s );
	85: 	}
	86: }

【評価項目】
  □float型の表現範囲と実数型定数の指数表記（①～③）
  □実数型（浮動小数点数型）の誤差（④～⑥）
  □実数型乱数の生成（⑦⑧）
  □四捨五入（⑨）